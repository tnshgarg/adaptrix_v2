{
  "metadata": {
    "timestamp": "2025-07-02T10:32:58.909821",
    "model_name": "Qwen/Qwen3-1.7B",
    "adapter_path": "adapters/code_adapter",
    "total_tests": 3,
    "injection_method": "direct_middle_layer_fixed",
    "fixes_applied": [
      "Manual injection point registration",
      "Fixed Gemini response parsing",
      "Fixed division by zero errors",
      "Improved response quality scoring"
    ]
  },
  "overall_statistics": {
    "base": {
      "name": "Base Qwen3-1.7B",
      "avg_score": 64.66666666666666,
      "avg_time": 55.38086954752604,
      "success_rate": 1.0,
      "total_tests": 3
    },
    "lora": {
      "name": "Qwen3 + Your Trained LoRA",
      "avg_score": 73.44444444444444,
      "avg_time": 27.084436575571697,
      "success_rate": 1.0,
      "total_tests": 3
    },
    "adaptrix": {
      "name": "Qwen3 + Adaptrix Middle Injection",
      "avg_score": 33.333333333333336,
      "avg_time": 92.84758202234904,
      "success_rate": 1.0,
      "total_tests": 3
    },
    "gemini": {
      "name": "Gemini Flash 2.0",
      "avg_score": 63.666666666666664,
      "avg_time": 1.9603312810262044,
      "success_rate": 1.0,
      "total_tests": 3
    }
  },
  "detailed_results": {
    "Simple Function": {
      "base": {
        "content": "def factorial(n):\n    # ...\n    return n\n\nTest your function with different input values and ensure it returns the correct output.\nn = 5\nprint(factorial(n))  # Expected output: 120\nn = 0\nprint(factorial(n))  # Expected output: 1\nn = 1\nprint(factorial(n))  # Expected output: 1\nn = -3\nprint(factorial(n))  # Expected output: 1",
        "generation_time": 55.570618867874146,
        "length": 325,
        "success": true,
        "quality_score": 94.0
      },
      "lora": {
        "content": "n = 7\ndef factorial(n):\n    # your code\n    return 1\nprint(factorial(n)) # 5040\nTo do this, you must first write a function named factorial that takes a parameter n.\nThen, write an if statement to check if n is 0. If n is 0, return 1.\nIf not, multiply n by the factorial of (n-1) and return the result.\nMake sure to handle any potential errors or",
        "generation_time": 26.166226863861084,
        "length": 346,
        "success": true,
        "quality_score": 100
      },
      "adaptrix": {
        "content": "```py import math def factorial(n): \"\"\" Calculate the factorial of a non-negative integer n. The factorial of n is defined as: - 1 when n = 0 or n = -1 (but this case may not be considered here) - n * (n-1) *... * 2 * 1 for positive integers Parameters: n (int): A non-negativeinteger Returns: int: The factorial value of n. Raises: ValueError: If n is negative. \"\"\" # Check if input is valid if not isinstance(n, int): raise TypeError(\"Input must be an integer.\") if n < 0: raise ValueError(\"Factorial is undefined for negative numbers.\") result = 1 for i in range(1, n + 1): result *= i return result if __name__ == \"__main__\": print(factorial(5)) # Expected output: 120 ``` Wait... but that's just the same as using math.factorial. Why do I need to write my own? Because maybe someone doesn't have access to math module? But then again.",
        "generation_time": 88.3047091960907,
        "length": 839,
        "success": true,
        "quality_score": 0.0
      },
      "gemini": {
        "content": "```python\ndef factorial(n):\n  \"\"\"\n  Calculates the factorial of a non-negative integer.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The factorial of n (n!), or 1 if n is 0.\n    Raises ValueError if n is negative.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Factorial is not defined for negative numbers.\")\n  elif n == ",
        "generation_time": 3.3695597648620605,
        "length": 326,
        "success": true,
        "quality_score": 91.0
      }
    },
    "Basic Loop": {
      "base": {
        "content": "n is an integer. But if n is divisible by 3, return \"Fizz\"; if it's divisible by 5, return \"Buzz\"; if it's divisible by both 3 and 5, return \"FizzBuzz\". For other numbers, return the same number. However, if the number is a prime number, return \"Prime\".\n\nNote: The function should not use any loops or recursion to solve the problem. You can use the built-in functions and methods to achieve this.\nHere",
        "generation_time": 55.316627979278564,
        "length": 402,
        "success": true,
        "quality_score": 38.33333333333333
      },
      "lora": {
        "content": "the function should print the numbers and their corresponding factors, but only if the numbers are divisible by both 3 and 5. Additionally, the function should also count the number of times each factor appears. For instance, if the input is 15, the output should be:\n\n1: 3, 5\n2: 3, 5\n3: 3, 5\n4: 3, 5\n5: 3, 5\n6:",
        "generation_time": 27.961103916168213,
        "length": 311,
        "success": true,
        "quality_score": 29.33333333333333
      },
      "adaptrix": {
        "content": "```python def count_up_to_n(n): \"\"\" Counts numbers from 0 to n (inclusive) in increasing order using recursion. Args: n: The upper bound of the range. It is an integer >=0 Returns: A list containing all integers from 2 to n inclusive. Example: >>> count_up_count(3) [2, 3] \"\"\" # Base case: when n == 0 return empty list? pass ``` Wait! I see you've written the starter version for this problem but left it incomplete. Let me review what needs to be done here. The task says we need to create a function called `count_up_to_` which takes an argument `n`, and returns a list of numbers from **2** up to and including `n`. However, looking at your initial implementation, there's a few issues: ### Issues Identified: 1. Your base case is not correctly defined - currently it just returns an empty list when `n == 2`. 2. There\u2019s no actual recursive logic implemented yet; only a placeholder (`pass`) statement exists. 3. You have some conflicting or incorrect naming like \"count_up_count\" instead of \"count_u.",
        "generation_time": 83.32120108604431,
        "length": 1005,
        "success": true,
        "quality_score": 100
      },
      "gemini": {
        "content": "```python\ndef count_to_n(n):\n  \"\"\"\n  Counts from 1 to n and prints each number.\n\n  Args:\n    n: The upper limit of the count (inclusive).  Must be a positive integer.\n\n  Returns:\n    None.  Prints the numbers to the console.\n\n  Raises:\n    TypeError: if n is not an integer.\n    ValueError: if n is not a positive integer.\n  \"\"\"\n\n  ",
        "generation_time": 1.1567819118499756,
        "length": 332,
        "success": true,
        "quality_score": 0.0
      }
    },
    "List Processing": {
      "base": {
        "content": "[1, 2, 3, 4, 5, 6], but also returns the index of the maximum value in the list. Additionally, handle the case where multiple maximum values exist and return all indices. The list may be large (up to 10^6 elements), so your function should be efficient and not use any external libraries or pre-built functions for this purpose.\n\nExample:\nlist1 = [1, 2, 3, 4, 5",
        "generation_time": 55.255361795425415,
        "length": 361,
        "success": true,
        "quality_score": 61.66666666666666
      },
      "lora": {
        "content": "[5, 3, 8, 10, 12]\nAlso, include a piece of erroneous code that attempts to find the maximum value but fails. Analyze the error and correct the code. \n\nThe function should also be able to handle negative numbers and floating point numbers. \n\nHere is the erroneous code that is supposed to find the maximum value in the list:\n```python\ndef find_max_value(numbers):\n    max_value = numbers[0]\n    for number in numbers",
        "generation_time": 27.12597894668579,
        "length": 415,
        "success": true,
        "quality_score": 91.0
      },
      "adaptrix": {
        "content": "```python def find_max_value_in_list(lst): \"\"\" Find the maximum element in a given list of numbers. Args: lst (list): A list of numeric values. Returns: int or float: The maximum value found in the list. Raises: ValueError: If the input list is empty. \"\"\" # Check for an empty list if not lst: raise ValueError(\"Input list cannot be empty.\") # Initialize max_val to the first element of the list # This ensures we have at least one element to compare # Iterate through the remaining elements for num in lst[1:]: if num > max_val: max_val = num return max_val # Example Usage if __name__ == \"__main__\": sample_data = [3, 5, 2, 8, 4, 9] print(f\"Maximum value in {sample_data} is {find_max_valueInList(sample_data)}\") ``` Wait! There's a typo in this code. Let me fix it! The correct function name should be `find_max_values` instead of `find Max Value In List`. I need you to make sure your final.",
        "generation_time": 106.91683578491211,
        "length": 895,
        "success": true,
        "quality_score": 0.0
      },
      "gemini": {
        "content": "```python\ndef find_maximum(data):\n  \"\"\"\n  Finds the maximum value in a list.\n\n  Args:\n    data: A list of numbers.  It's assumed the list contains at least one element.\n\n  Returns:\n    The maximum value in the list.\n    Returns None if the list is empty.\n  \"\"\"\n\n  if not data:  # Check if the list is empty\n    return None\n\n  maximum = data[",
        "generation_time": 1.3546521663665771,
        "length": 341,
        "success": true,
        "quality_score": 100
      }
    }
  },
  "insights": {
    "lora_vs_base": 13.57388316151204,
    "adaptrix_vs_base": -48.45360824742267,
    "adaptrix_vs_lora": -54.61422087745839,
    "adaptrix_vs_gemini": -47.643979057591615
  }
}